import { Vector2d, VectorList } from '../vector/tuple';
import { Geometry } from '../geometry/tuple';
export interface FontOptions {
    font?: string;
    textAlign?: string;
    textBaseline?: string;
    maxWidth?: number;
}
export declare type Palette = {
    canvas: HTMLCanvasElement;
    ctx: CanvasRenderingContext2D;
    translate: (vec: Vector2d) => void;
    rotate: (angle: number) => void;
    moveTo: (vec: Vector2d) => void;
    lineTo: (vec: Vector2d) => void;
    quadraticCurveTo: (vec: Vector2d, control: Vector2d) => void;
    arc: (vec: Vector2d, radius: number, startAngle?: number, endAngle?: number, counterClockwise?: boolean) => void;
    drawLine: (points: VectorList, angle?: number) => void;
    drawPolygon: (position: Vector2d, points: VectorList, angle?: number) => void;
    drawArc: (vec: Vector2d, angle: number, radius?: number, startAngle?: number, endAngle?: number, counterClockwise?: boolean) => void;
    drawImage: (image: HTMLImageElement | HTMLVideoElement | HTMLCanvasElement) => (vec: Vector2d, width: number, height: number) => void;
    drawSlicedImage: (image: HTMLImageElement | HTMLVideoElement | HTMLCanvasElement) => (vec: Vector2d, slice: Vector2d, sliceWidth: number, sliceHeight: number, width: number, height: number) => void;
    fillRectangle: (style: string, position: Vector2d, width: number, height: number, angle: number) => void;
    fillPolygon: (style: string, position: Vector2d, points: VectorList, angle: number) => void;
    fillLine: (style: string, points: VectorList, angle: number) => void;
    fillArc: (style: string, vec: Vector2d, angle: number, radius: number, startAngle?: number, endAngle?: number, counterClockwise?: boolean) => void;
    fillText: (fontOptions: FontOptions, vec: Vector2d, text: string) => void;
    strokePolygon: (style: string, position: Vector2d, points: VectorList, angle: number) => void;
    strokeRectangle: (style: string, position: Vector2d, width: number, height: number, angle: number) => void;
    strokeLine: (style: string, points: VectorList, angle: number) => void;
    strokeArc: (style: string, vec: Vector2d, angle: number, radius: number, startAngle?: number, endAngle?: number, counterClockwise?: boolean) => void;
    strokeText: (fontOptions: FontOptions, vec: Vector2d, text: string) => void;
    clearRect: (vec: Vector2d, width: number, height: number) => void;
    clear: () => void;
};
export declare const createPalette: (ctx: CanvasRenderingContext2D) => {
    ctx: CanvasRenderingContext2D;
    canvas: HTMLCanvasElement;
    translate: (vec: [number, number]) => void;
    rotate: (angle: number) => void;
    moveTo: (vec: [number, number]) => void;
    lineTo: (vec: [number, number]) => void;
    quadraticCurveTo: (vec: [number, number], control: [number, number]) => void;
    arc: (vec: [number, number], radius: number, startAngle: number, endAngle: number, counterClockwise: boolean) => void;
    drawLine: (points: number[], angle?: number) => void;
    drawPolygon: (position: [number, number], points: number[], angle?: number) => void;
    drawArc: (vec: [number, number], angle: number, radius?: number, startAngle?: number, endAngle?: number, counterClockwise?: boolean) => void;
    drawImage: (image: HTMLCanvasElement | HTMLImageElement | HTMLVideoElement) => (vec: [number, number], width: number, height: number) => void;
    drawSlicedImage: (image: HTMLCanvasElement | HTMLImageElement | HTMLVideoElement) => (vec: [number, number], slice: [number, number], sliceWidth: number, sliceHeight: number, width: number, height: number) => void;
    fillRectangle: (style: string, position: [number, number], width: number, height: number, angle: number) => void;
    fillPolygon: (style: string, position: [number, number], points: number[], angle: number) => void;
    fillLine: (style: string, points: number[], angle: number) => void;
    fillArc: (style: string, vec: [number, number], angle: number, radius: number, startAngle: number, endAngle: number, counterClockwise: boolean) => void;
    fillText: (fontOptions: FontOptions, vec: [number, number], text: string) => void;
    strokePolygon: (style: string, position: [number, number], points: number[], angle: number) => void;
    strokeRectangle: (style: string, position: [number, number], width: number, height: number, angle: number) => void;
    strokeLine: (style: string, points: number[], angle: number) => void;
    strokeArc: (style: string, vec: [number, number], angle: number, radius: number, startAngle: number, endAngle: number, counterClockwise: boolean) => void;
    strokeText: (fontOptions: FontOptions, vec: [number, number], text: string) => void;
    clearRect: (vec: [number, number], width: number, height: number) => void;
    clear: () => void;
};
